<?php
class BaseController
{
	protected $vars        = [];
	protected $layout      = 'default';
	protected $title       = SITE_NAME;

	public function __construct()
	{
		spl_autoload_register(array($this, 'loadClass')); // Autoloader de classes
	}

    /**
     * Method generated by the spl_autoload_register function, in order to load automatically a model when called
     */
	public function loadClass($class)
	{
		$fileName = ROOT . 'model/' . ucfirst($class) . '.php';
		if (file_exists($fileName)) {
			require(ROOT . 'model/' . ucfirst($class) . '.php');
		}
    }

	/**
	 * Magic setters and getters
	 */
	public function __set($name, $value)
    {
        $this->vars[$name] = $value;
    }

    public function __get($name)
    {
        if (array_key_exists($name, $this->vars)) {
            return $this->vars[$name];
        }

        $trace = debug_backtrace();
        trigger_error(
            'Propriété non-définie via __get() : ' . $name .
            ' dans ' . $trace[0]['file'] .
            ' à la ligne ' . $trace[0]['line'],
            E_USER_NOTICE);
        return null;
    }

    /**
     * Loads the layout (by default the "default" layout)
     *
     * @param string $layout Name of the layout's file
     */
	public function loadLayout($layout = null)
	{
		// Temporize the output in order to set sessions and content before rendering it
		ob_start();
		if ($layout == null) {
			if (file_exists(ROOT . 'layout/' . $this->layout . '.phtml')) {
				require_once(ROOT . 'layout/' . $this->layout . '.phtml');
			} else {
				echo 'Le layout ' . ROOT . 'layout/' . $this->layout . '.phtml n\'existe pas. ';
			}
		} else {
			if (file_exists(ROOT . 'layout/' . $layout . '.phtml')) {
				$this->layout = $layout;
				require_once(ROOT . 'layout/' . $layout . '.phtml');
			} else {
				echo 'Le layout ' . ROOT . 'layout/' . $layout . '.phtml n\'existe pas. ';
			}
		}
	}

    /**
     * Renders the view with the end of the layout if needed (in case we use HTML tags).
     *
     * @param string $fileName Name of the view's file
     */
	public function render($fileName)
	{
		extract($this->vars); // Allow us to use directly var names instead of "$this->varName"

		if (in_array($fileName, array('404', '500'))) {
			require_once(ROOT . 'view/errors/' . $fileName . '.phtml');
		
			// Stops the temporization started in loadLayout()
			echo ob_get_clean();

			return;
		}

		// Loading the view file
		$controller = strtolower(get_class($this));
		$controller = str_replace('controller', '', $controller);
		if (file_exists(ROOT . 'view/' . $controller . '/' . $fileName . '.phtml')) {
			require_once(ROOT . 'view/' . $controller . '/' . $fileName . '.phtml');
		} else {
			echo 'La vue ' . ROOT . 'view/' . $controller . '/' . $fileName . '.phtml n\'existe pas. ';
		}

		// Loading the end of the layout in order to put the content between <body> and </body> tags.
		if (file_exists(ROOT . 'layout/' . $this->layout . '_end.phtml')) {
			require_once(ROOT . 'layout/' . $this->layout . '_end.phtml');
		}
		
		// Stops the temporization started in loadLayout()
		echo ob_get_clean();
	}

	/**
	 * Get request method from $_SERVER global variable
	 *
	 * @ return $_SERVER['REQUEST_METHOD'] array
	 */
	public function getRequestMethod()
	{
		return $_SERVER['REQUEST_METHOD'];
	}

	/**
	 * Set HTTP status code
	 *
	 * @param $httpCode int HTTP status code
	 */
	public function sendStatus($httpCode)
	{
		$codes = [
	        200 => 'OK',
	        201 => 'Created',
	        204 => 'No content',
	        400 => 'Bad request',
	        404 => 'Not found',
	        401 => 'Unauthorized',
	        405 => 'Method not allowed',
	        409 => 'Conflict',
	        500 => 'Internal server error',
	    ];
	    header('HTTP/1.1 ' . $httpCode . $codes[$httpCode]);
	}

	/**
	 * Set HTTP header and die the script with a message
	 *
	 * @param $httpCode string HTTP header to set
	 * @param $error string Error message
	 */
	public function exitError($httpCode, $error = '')
	{
		$this->sendStatus($httpCode);
		die($error);
	}

	/**
	 * Check if the value is a real int
	 *
	 * @param $value mixed Value to test
	 * @return bool
	 */
	public function isInt($value)
	{
		if (is_numeric($value) && is_int((int)$value)) {
			return true;
		}

		return false;
	}

	/**
	 * Check if the value is a real float
	 *
	 * @param $value mixed Value to test
	 * @return bool
	 */
	public function isFloat($value)
	{
		if (is_numeric($value) && is_float((float)$value)) {
			return true;
		}

		return false;
	}

	/**
	 * Validate date with format.
	 *
	 * @param $date date Date to check
	 * @param $format string Date format (default : Y-m-d H:i:is)
	 * @return bool
	 */
	public function isDate($date, $format = 'Y-m-d H:i:s')
	{
		$dateTime = DateTime::createFromFormat($format, $date);
		return $dateTime && $dateTime->format($format) == $date;
	}

	/**
	 * Check that every required field is filled and that they match the expected type.
	 *
	 * @param array $fields Fields to check with name and type
	 * @param array $datas Datas to check
	 * @param string $dateFormat Date format. Default : "Y-m-d H:i:s"
	 * @return bool
	 */
	public function checkRequiredFields($fields, $datas, $dateFormat = 'Y-m-d H:i:s')
	{
		$hasError = false;
		$i        = 0;
		$error    = '';
		
		foreach ($fields as $field => $type) {
			if (!isset($datas[$field]) 
				|| ($type == 'string' && !is_string($datas[$field])) 
				|| ($type == 'int' && !$this->isInt($datas[$field]))
				|| ($type == 'float' && !$this->isFloat($datas[$field]))
				|| ($type == 'date' && !$this->isDate($datas[$field], $dateFormat))
				|| ($type == 'bool' && $datas[$field])
			) {
				$hasError = true;

				if ($type == 'date') {
					$error .= "'$field' is a required field and must be of type: $type with format: $dateFormat";
				} else {
					$error .= "'$field' is a required field and must be of type: $type";
				}
				$error .= ($i++ != count($fields)) ? "\r\n" : '';
			}
		}

		if ($hasError) {
			$this->exitError(400, $error);
		}

		return true;
	}
}
